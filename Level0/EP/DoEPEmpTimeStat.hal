external function Boolean IsEPHolliday(Date,record BHollVc,record TimeClassVc,Boolean,boolean);
external procedure GetmonthText(string,date,var string);
external procedure PrintValue(string,val,Integer,record LangNrVc,record SysFormatBlock,Boolean);
external procedure GetLangNr(string,var record LangNrVc);
external function integer DateIsRedDay(integer ,date);
external procedure GetTSRecs(array string,array val,integer,string,record RcVc);
external procedure GetOffWorkRecs(array string,array val,integer,string,record RcVc);
external function longint datediff(date,date);
external function Time TimeDiff(Time,Time);
external function Boolean IsEPHolliday(Date,record BHollVc,record TimeClassVc,Boolean,boolean);
external procedure PrintEmpFields(Record EPEmpvc);
external function Boolean Getformcode(integer,Integer,string,string,string,LongInt,LongInt,string,string,Integer,string,var string);
external procedure CommonDocumentFields(record RcVc);
external function longint datediff(date,date);
external function roundmode SetRoundModeD(Integer);
external function string 255 EPContractFieldOnDate2(record EPContractVc,date,string);

procedure DateStat(date td,record TimeClassVc Timeclr,var boolean holidayf)
begin
  
  integer i;
  boolean iswday;
  
  holidayf = false;
  i = GetDateId(td);
  iswday = true;
  switch(i) begin
    case 1:       
      if (TimeClr.Monday==0) then begin iswday = false; end;
    case 2:
      if (TimeClr.Tuesday==0) then begin iswday = false; end;
    case 3:
      if (TimeClr.Wednesday==0) then begin iswday = false; end;
    case 4:
      if (TimeClr.Thursday==0) then begin iswday = false; end;
    case 5:
      if (TimeClr.Friday==0) then begin iswday = false; end;
    case 6:
      if (TimeClr.Saturday==0) then begin iswday = false; end;
    case 7:
      if (TimeClr.Sunday==0) then begin iswday = false; end;
  end;
  if (iswday==false) then begin
    holidayf = true;
  end;
return;
end;

procedure AddToArray(array string trtypes,array integer totcnt,array val tothrcnt,var integer size,string trtype,val hrs)
begin
  integer i;
  if (trtype=="") then begin
    totcnt[0] = totcnt[0] + 1;
    tothrcnt[0] = tothrcnt[0] + hrs;
  end else begin
  
    for (i = 1; i < size; i = i +1) begin
      if (trtypes[i]==trtype) then begin
        totcnt[i] = totcnt[i] + 1;
        tothrcnt[i] = tothrcnt[i] + hrs;
        goto LExit;
      end;
    end;
    trtypes[size] = trtype;
    totcnt[size] = 1;
    tothrcnt[size] = hrs;
    size = size + 1;
LExit:;
  end;
return;
end;

procedure GetTSRecsWithType(array string daytype,array val hrcnt,integer size,string contractnr,record RcVc RepSpec,string timeclass,integer ttype,record EPPayRollSetBlock EPSetBl,record EPTSVc EPTSr)
begin
  record EPContractVc EPContractr;
  record TImeclassVc Timeclr;
  row EPTSVc EPTSrw;
  row EPTS2Vc EPTS2rw;
  integer rw,rwc;
  date sd,ed,cd;
  integer hcnt1,hcnt2;
  integer a,i,l,j,k;
  val t,res;
  boolean trhs,testf,hf;
  val qty,sum;
  boolean foundf,firstf;
  array val totres;
  record EPTS2Vc EPTS2r;
  
  //ClearArray(hrcnt);

  if (ttype == 1) then begin
    hcnt1 = round(datediff(EPTSrw.EDate,EPTSrw.SDate),SetRoundModeD(2));
    EPContractr.ContractNr = EPTSrw.ContractNrRow;
    if (Readfirstmain(EPContractr,1,true)) then begin
      if (nonblank(EPTSrw.TimeClass)) then begin
        TimeClr.Code = EPTSrw.TimeClass;
        testf = ReadFirstMain(Timeclr,1,true);
      end else begin 
        TimeClr.Code = EPContractr.TimeClass;
        testf = ReadFirstMain(Timeclr,1,true);
      end;
      i = datediff(EPTSrw.SDate,RepSpec.sStartDate);
      l = datediff(EPTSrw.EDate,RepSpec.sStartDate);
      for (a = i; a <= l; a = a + 1) begin
        cd = AddDay(RepSpec.sStartDate,a);
        DateStat(cd,Timeclr,hf);
        if (hf==false) then begin
          t = gethour(timediff(Timeclr.EndTime,timeclr.StartTime));
          hrcnt[a] = t;
          daytype[a] = "";
        end else begin
          //hrcnt[a] = 0;
        end;
      end;          
    end;
  end;
  
  firstf = true;
  
  rwc = matrowcnt(EPTSr);
  for (rw=0;rw<rwc;rw=rw+1) begin
    matrowget(EPTsr,rw,EPTSrw);
    testf =true;
    if (EPTSrw.SDate>RepSpec.sEndDate) then begin
      testf = false;
    end;
    if (EPTsrw.EDate<RepSpec.sStartDate) then begin
      testf = false;
    end;
    if (EPTSrw.ContractNrRow<>contractnr) then begin
      testf = false;
    end;
    if (testf) then begin
      hcnt1 = round(datediff(EPTSrw.EDate,EPTSrw.SDate),SetRoundModeD(2));
      EPContractr.ContractNr = EPTSrw.ContractNrRow;
      if (ReadFirstMain(EPContractr,1,true)) then begin
        if (nonblank(EPTSrw.TimeClass)) then begin
          TimeClr.Code = EPTSrw.TimeClass;
          testf = ReadFirstMain(Timeclr,1,true);
        end else begin 
          TimeClr.Code = EPContractr.TimeClass;
          testf = ReadFirstMain(Timeclr,1,true);
        end;
        i = datediff(EPTSrw.SDate,RepSpec.sStartDate);
        l = datediff(EPTSrw.EDate,RepSpec.sStartDate);
        for (a=i;a<=l;a=a+1) begin
          cd = AddDay(RepSpec.sStartDate,a);
          DateStat(cd,Timeclr,hf);
          if (hf==false) then begin
            t = gethour(timediff(timeclr.StartTime,Timeclr.EndTime));
            if (firstf) then begin
              hrcnt[a] = t;
            end else begin
              hrcnt[a] = hrcnt[a] + t;
            end;
            daytype[a] = "";
          end else begin
          end;
        end;  
        firstf = false;        
      end;
    end;
  end;
  
//=========
//==adding reords from new register
//=========
  EPTS2r.StartDate = RepSpec.sStartDate;
  TrHs = true;
  while (LoopKey("ContractNr:" & contractnr,EPTS2r,1,TrHs)) begin
    if (EPTS2r.StartDate > RepSpec.sEndDate) then begin
      TrHs = false;
    end else begin
      testf = true;
      foundf = false;
      if (EPTS2r.OKFlag<>1 and RepSpec.long1<0) then begin
        testf = false;
      end;
      if (testf) then begin
        rwc = matrowcnt(EPTS2r);
        for (rw = 0; rw < rwc; rw = rw + 1) begin
          matrowget(EPTs2r,rw,EPTS2rw);
          testf =true;
          if (EPTS2rw.ContractNr <> contractnr) then begin
            testf = false;
          end;
          if (ttype==1 and EPTS2rw.stp==1) then begin
          
          end else begin
            if (EPTS2rw.TimeClass <> timeclass) then begin
              testf = false;
            end;
          end;
          if (testf) then begin
            Sum = 0;
            Qty = 0;
      
            i = datediff(EPTS2r.StartDate,RepSpec.sStartDate);
            l = datediff(EPTS2r.EndDate,RepSpec.sStartDate);
            foundf = true;
            for (a = i; a <= l; a = a + 1) begin
              cd = AddDay(RepSpec.sStartDate,a);
              j = GetDay(cd);
              res = StringToVal(GetFieldValueByName(EPTS2r,"Day" & j,rw),M4Val);
              if res==-1 then begin res = 0; end;
        
              sum = sum + EPTS2rw.Price * res;
              qty = qty + res;
              totres[a] = totres[a] + res;
            end;
          end;
        end;
        if foundf then begin
          i = datediff(EPTS2r.StartDate,RepSpec.sStartDate);
          l = datediff(EPTS2r.EndDate,RepSpec.sStartDate);

          for (a = i; a <= l; a = a + 1) begin
            if (firstf) then begin
              hrcnt[a] = totres[a];
            end else begin
              hrcnt[a] = hrcnt[a] + totres[a];            
            end;
            if hrcnt[a] > 0 then begin
              daytype[a] = "";
            end else begin
              if (blank(daytype[a])) then begin
                //daytype[a] = "Br";
              end;
            end;
          end;
          firstf = false;
        end;
      end;
    end;
  end;

  return;
end;

function boolean GetDefaultHours(array string daytype,array val hrcnt,record RCVc RepSpec,integer type,
                                record EPContractVc EPContractr,record BHollVc BHr,record EPPayRollSetBlock EPBl,
                                var string timeclass,boolean addf)
begin
  date cd;
  record TimeClassVc Timeclr,HolTimeclr;
  boolean foundf,holfoundf,testf;
  boolean res;
  integer i;
  string 255 timeclass_type,oldtc,curtc;
  
  cd = RepSpec.sStartDate;

  switch (type) begin
    case 1:   timeclass_type = "TimeClass";
    case 2:   timeclass_type = "AddTSTimeClass1";
    case 3:   timeclass_type = "AddTSTimeClass2";
    case 4:   timeclass_type = "AddTSTimeClass3";
  end;

  HolTimeclr.Code = EPContractr.HolTimeClass;
  holfoundf = ReadFirstMain(HolTimeclr,1,true);
  if holfoundf==false then begin
    HolTimeclr.Code = EPBl.HolTimeClass;
    holfoundf = ReadFirstMain(HolTimeclr,1,true);
  end;
  res = true;
  while (cd <= RepSpec.sEndDate) begin
    oldtc = curtc;
    curtc = EPContractFieldOnDate2(EPContractr,cd,timeclass_type);
    if (curtc!=oldtc) then begin
      Timeclr.Code = curtc;
      foundf = ReadFirstMain(Timeclr,1,true);
    end;
    if (foundf) then begin
      if (!addf) then begin
        hrcnt[i] = -1;
      end;
      daytype[i] = "";
      testf = true;
      if (cd < EPContractr.StartDate) then begin
        testf = false;
      end;
      if (nonblank(EPContractr.EndDate) and (cd > EPContractr.EndDate)) then begin
        testf = false;
      end;
      if (testf) then begin
        if IsEPHolliday(cd,BHr,Timeclr,false,false) then begin
          daytype[i] = "Br";
          hrcnt[i] = 0;
          if IsEPHolliday(cd,BHr,Timeclr,true,false) then begin
            daytype[i] = "Sv";
            //KZS added because the day before holiday has to have 1 hour less
            if i > 0 and holfoundf and type == 1 then begin
              if daytype[i-1] == "" then begin
                if hrcnt[i-1]>0 then begin
                  hrcnt[i-1] = gethour(TimeDiff(Holtimeclr.StartTime,Holtimeclr.EndTime));
                end;
              end;
            end;
          end;
        end else begin
          if (addf) then begin
            hrcnt[i] = hrcnt[i] + gethour(TimeDiff(Timeclr.StartTime,Timeclr.EndTime));
          end else begin
            hrcnt[i] = gethour(TimeDiff(Timeclr.StartTime,Timeclr.EndTime));
          end;
          daytype[i] = "";
        end;
      end;
    end;
    cd = AddDay(cd,1);
    i = i + 1;
  end;
  
  //KZS added because the day before holiday has to have hour less
  if i > 0 and holfoundf and type == 1 then begin
    if daytype[i-1] == "" then begin
      if IsEPHolliday(cd,BHr,Timeclr,true,false) then begin
        if hrcnt[i-1]>0 then begin
          hrcnt[i-1] = gethour(TimeDiff(Holtimeclr.StartTime,Holtimeclr.EndTime));
        end;
      end;
    end;
  end;
  timeclass = curtc;

  GetDefaultHours = res;
  return;
end;


procedure PrintEmpTimeStatWithType(record EPTSVc EPTSr,record EPTS2Vc EPTS2r,record EPEmpVc EPEmpr,record RCVc RepSpec,integer type,record EPContractVc EPContractr,record EPPayRollSetBlock EPBl,record BHollVc BHr)
begin
  integer i,size,a,hpos,size2;
  string 255 tstr;

  array string 20 tottrtypes;
  array integer totcnt;
  array val tothrcnt;

  array val hrcnt;
  array string 20 daytype;
  string 20 timeclass;

  record LangNrVc LangNrr;
  record SysFormatBlock SysFormatRec;
  record TimeClassVc Timeclr;

  BlockLoad(SysFormatRec);
  GetLangNr("",LangNrr);  
  
  size = datediff(RepSpec.sEndDate,RepSpec.sStartDate)+1;
  if (GetDefaultHours(daytype,hrcnt,RepSpec,type,EPContractr,BHr,EPBl,timeclass,false)) then begin
    size2 = 1;
    GetTSRecsWithType(daytype,hrcnt,size,EPContractr.ContractNr,RepSpec,timeclass,type,EPBl,EPTSr);
    GetOffWorkRecs(daytype,hrcnt,size,EPContractr.ContractNr,RepSpec);
    for (i = 0; i < size; i = i + 1) begin
      tstr = i+1;
      if (daytype[i]<>"") then begin
        AddToArray(tottrtypes,totcnt,tothrcnt,size2,daytype[i],0);
        OUTFORMFIELD(tstr,daytype[i]);
      end else begin
        if (hrcnt[i]>0) then begin
          PrintValue(tstr,hrcnt[i],M4UVal,LangNrr,SysFormatRec,false);
          if (hrcnt[i] <> 0) then begin
            AddToArray(tottrtypes,totcnt,tothrcnt,size2,"",hrcnt[i]);
          end;
        end;
      end;
    end;
    for (i = 0; i < size2; i = i +1) begin
      if (tottrtypes[i]<>"") then begin
        PrintValue(tottrtypes[i],totcnt[i],M4UVal,LangNrr,SysFormatRec,false);
      end else begin
        PrintValue("F_TOTANTAL",tothrcnt[i],M4UVal,LangNrr,SysFormatRec,false);
      end;
    end;
    if (type>1) then begin
      Timeclr.Code = timeclass;
      if ReadFirstMain(Timeclr,1,true) then begin
        OUTFORMFIELD("F_EMPNAME",Timeclr.Comment);
      end;
    end;
    EndFormRow;
  end;

  return;
end;

procedure PrintEmpTimeStatFull(record EPTSVc EPTSr,record EPTS2Vc bEPTS2r,record EPEmpVc EPEmpr,record RCVc RepSpec,integer type,record EPContractVc EPContractr,record EPPayRollSetBlock EPBl,record BHollVc BHr)
begin
  integer i,size,a,hpos,size2,rwc,rw;
  string 255 tstr;

  array string 20 tottrtypes;
  array integer totcnt;
  array val tothrcnt,totres;

  array val hrcnt,hrcnt_def;
  array string 20 daytype;
  string 20 timeclass;

  record LangNrVc LangNrr;
  record SysFormatBlock SysFormatRec;
  record TimeClassVc Timeclr;
  record EPTS2Vc EPTS2r;
  row EPTS2Vc EPTS2rw;
  Boolean TrHs,testf,epts2f,foundf,firstf;
  Date cd;
  
  integer l,j,k;
  val qty,sum,res;


  BlockLoad(SysFormatRec);
  GetLangNr("",LangNrr);  
  
  firstf = true;
  size = datediff(RepSpec.sEndDate,RepSpec.sStartDate)+1;
  if (GetDefaultHours(daytype,hrcnt_def,RepSpec,type,EPContractr,BHr,EPBl,timeclass,false)) then begin
    size2 = 1;
    EPTS2r.StartDate = RepSpec.sStartDate;
    TrHs = true;
    while (LoopKey("ContractNr:" & EPContractr.ContractNr,EPTS2r,1,TrHs)) begin
      if (EPTS2r.StartDate > RepSpec.sEndDate) then begin
        TrHs = false;
      end else begin
        testf = true;
        if (EPTS2r.OKFlag<>1 and RepSpec.long1<0) then begin
          testf = false;
        end;
        if (testf) then begin
          rwc = matrowcnt(EPTS2r);
          for (rw = 0; rw < rwc; rw = rw + 1) begin
            matrowget(EPTs2r,rw,EPTS2rw);
            ClearArray(hrcnt);
            ClearArray(tottrtypes);
            ClearArray(totcnt);
            ClearArray(tothrcnt);
            ClearArray(totres);
            foundf = false;
            testf =true;
            if (EPTS2rw.ContractNr <> EPContractr.ContractNr) then begin
              testf = false;
            end;
            if (testf) then begin
              Sum = 0;
              Qty = 0;
      
              i = datediff(EPTS2r.StartDate,RepSpec.sStartDate);
              l = datediff(EPTS2r.EndDate,RepSpec.sStartDate);
              foundf = true;
              for (a = i; a <= l; a = a + 1) begin
                cd = AddDay(RepSpec.sStartDate,a);
                j = GetDay(cd);
                res = StringToVal(GetFieldValueByName(EPTS2r,"Day" & j,rw),M4Val);
                if res==-1 then begin res = 0; end;
        
                sum = sum + EPTS2rw.Price * res;
                qty = qty + res;
                totres[a] = totres[a] + res;
              end;
            end;
            if foundf then begin
              epts2f = true;
              i = datediff(EPTS2r.StartDate,RepSpec.sStartDate);
              l = datediff(EPTS2r.EndDate,RepSpec.sStartDate);

              for (a = i; a <= l; a = a + 1) begin
                hrcnt[a] = totres[a];
                if hrcnt[a] > 0 then begin
                  daytype[a] = "";
                end else begin
                  if (blank(daytype[a])) then begin
                    daytype[a] = "Br";
                  end;
                end;
              end;
              GetOffWorkRecs(daytype,hrcnt,size,EPContractr.ContractNr,RepSpec);
              size2 = 1;
              for (i = 0; i < size; i = i + 1) begin
                tstr = i+1;
                if (daytype[i]<>"") then begin
                  AddToArray(tottrtypes,totcnt,tothrcnt,size2,daytype[i],0);
                  OUTFORMFIELD(tstr,daytype[i]);
                end else begin
                  if (hrcnt[i]>0) then begin
                    PrintValue(tstr,hrcnt[i],M4UVal,LangNrr,SysFormatRec,false);
                    if (hrcnt[i] <> 0) then begin
                      AddToArray(tottrtypes,totcnt,tothrcnt,size2,"",hrcnt[i]);
                    end;
                  end;
                end;
              end;
              for (i = 0; i < size2; i = i +1) begin
                if (tottrtypes[i]<>"") then begin
                  PrintValue(tottrtypes[i],totcnt[i],M4UVal,LangNrr,SysFormatRec,false);
                end else begin
                  PrintValue("F_TOTANTAL",tothrcnt[i],M4UVal,LangNrr,SysFormatRec,false);
                end;
              end;
              if (firstf==false) then begin
                Timeclr.Code = EPTS2rw.TimeClass;
                if ReadFirstMain(Timeclr,1,true) then begin
                  OUTFORMFIELD("F_EMPNAME",Timeclr.Comment);
                end;
              end;
              firstf = false;
              EndFormRow;  
            end;
          end;
        end;
      end;
    end;
    if (epts2f==false) then begin
      for (i = 0; i < size; i = i + 1) begin
        tstr = i+1;
        if (daytype[i]<>"") then begin
          AddToArray(tottrtypes,totcnt,tothrcnt,size2,daytype[i],0);
          OUTFORMFIELD(tstr,daytype[i]);
        end else begin
          if (hrcnt_def[i]>0) then begin
            PrintValue(tstr,hrcnt_def[i],M4UVal,LangNrr,SysFormatRec,false);
            if (hrcnt[i] <> 0) then begin
              AddToArray(tottrtypes,totcnt,tothrcnt,size2,"",hrcnt_def[i]);
            end;
          end;
        end;
      end;
      for (i = 0; i < size2; i = i +1) begin
        if (tottrtypes[i]<>"") then begin
          PrintValue(tottrtypes[i],totcnt[i],M4UVal,LangNrr,SysFormatRec,false);
        end else begin
          PrintValue("F_TOTANTAL",tothrcnt[i],M4UVal,LangNrr,SysFormatRec,false);
        end;
      end;    
      EndFormRow;
    end;
  end;

  return;
end;


procedure OutputExpandedTimeStat(record EPEmpVc EPEmpr,record RCVc RepSpec,record EPContractVc EPContractr,record EPPayRollSetBlock EPBl,record BHollVc BHr)
begin
  record EPTS2Vc EPTS2r;
  record EPTSVc EPTSr;
  boolean TrHs,times,times2,testf;
  row EPTSVc EPTSrw;
  integer rw,rwc;
  
  EPTS2r.StartDate = RepSpec.sStartDate;
  TrHs = true;
  times2 = false;
  while (LoopKey("ContractNr:" & EPContractr.ContractNr,EPTS2r,1,TrHs)) begin
    times2 = false;
    TrHs = false;  
    if (EPTS2r.StartDate > RepSpec.sEndDate) then begin
    end else begin
      if (EPTS2r.OKFlag==1) then begin
        times2 = true;
      end;
    end;
  end;
  
  
  
  if (times2==false) then begin
    RecordNew(EPTS2r);
    EPTSr.StartDate = RepSpec.sStartDate;
    trhs = true;
    times = false;
    while (LoopKey("StartDate",EPTSr,1,TrHs)) begin
      testf = true;
      if (EPTSr.StartDate > RepSpec.sEndDate) then begin
        testf = false;
      end;
      if (testf) then begin
        rwc = matrowcnt(EPTSr);
        for (rw = 0; rw < rwc; rw = rw + 1) begin
          matrowget(EPTsr,rw,EPTSrw);
          testf =true;
          if (EPTSrw.SDate > RepSpec.sEndDate) then begin
            testf = false;
          end;
          if (EPTsrw.EDate < RepSpec.sStartDate) then begin
            testf = false;
          end;
          if (EPTSrw.ContractNrRow <> EPContractr.ContractNr) then begin
            testf = false;
          end;
          if (testf) then begin
            times = true;
          end;
        end;
      end;
    end;
  end;
  
  PrintEmpTimeStatFull(EPTSr,EPTS2r,EPEmpr,RepSpec,1,EPContractr,EPBl,BHr);
/*  
  PrintEmpTimeStatWithType(EPTSr,EPTS2r,EPEmpr,RepSpec,1,EPContractr,EPBl,BHr);
  PrintEmpTimeStatWithType(EPTSr,EPTS2r,EPEmpr,RepSpec,2,EPContractr,EPBl,BHr);
  PrintEmpTimeStatWithType(EPTSr,EPTS2r,EPEmpr,RepSpec,3,EPContractr,EPBl,BHr);
  PrintEmpTimeStatWithType(EPTSr,EPTS2r,EPEmpr,RepSpec,4,EPContractr,EPBl,BHr);
*/
  return;
end;

function Boolean ContractShouldSkip(Longint sernr,string contr)
begin
  Boolean res;
  record EPTS2Vc EPTS2r;
  row EPTS2Vc EPTS2rw;
  Integer i,rwcnt;
  
  res = true;
  EPTS2r.SerNr = sernr;
  if (ReadFirstMain(EPTS2r,1,true)) then begin
    rwcnt = MatRowCnt(EPTS2r);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(EPTS2r,i,EPTS2rw);
      if (EPTS2rw.ContractNr==contr) then begin
        res = false;
        i = rwcnt;
      end;
    end;
  end;

  ContractShouldSkip = res;
  return;
end;

procedure PrintOneEmp(record RcVc RepSpec,record EPContractVc EpContractr,var integer rownr)
begin
  array string 20 tottrtypes;
  array integer totcnt;
  array val tothrcnt;
  
  array val hrcnt;
  array string 20 daytype;
  integer size,a,i,hpos,size2;
  
  record BHollVc BHr;
  record EPPayrollSetBlock EPBl;
  record LangNrVc LangNrr;
  record SysFormatBlock SysFormatRec;
  record TimeClassVc Timeclr,HolTimeclr;
  record CYBlock CYbl;
  record EPEMpVc EPEmpr;
  record EPTSVc EPTSr;
  date cd;
  string 20 timeclass;
  string 255 tstr;
  
  integer prevm,curm;
  boolean TrHs,testf,hf,firstf,foundf,holfoundf;
  
  //not the most efficient way, but not so many changes
  if (RepSpec.long1>-1 and ContractShouldSkip(RepSpec.long1,EPContractr.ContractNr)) then begin
    goto LPrintOneEmp;
  end;

  blockload(CYbl);
  blockload(EPBl);
  BlockLoad(SysFormatRec);
  GetLangNr("",LangNrr);  
  BHr.CountryCode = CYbl.CountryCode;
  testf = ReadFirstMain(BHr,1,true);
  TrHs = true;
  EPEmpr.EmpCode = EPContractr.EmpCode;
  testf = ReadFirstMain(EPEmpr,1,true);
  size = datediff(RepSpec.sEndDate,RepSpec.sStartDate)+1;
  BHr.CountryCode = CYbl.CountryCode;
  if ReadFirstMain(BHr,1,true)==false then begin
    RecordNew(BHr);
  end;
  i = 0;
  prevm = 0;
  OUTFORMFIELD("F_ROWNR",rownr);
  PrintEmpFields(EPEmpr);
  if (RepSpec.flags[0] == 0) then begin
    size2 = 1;
    GetDefaultHours(daytype,hrcnt,RepSpec,1,EPContractr,BHr,EPBl,timeclass,false);
    GetDefaultHours(daytype,hrcnt,RepSpec,2,EPContractr,BHr,EPBl,timeclass,true);
    GetDefaultHours(daytype,hrcnt,RepSpec,3,EPContractr,BHr,EPBl,timeclass,true);
    GetDefaultHours(daytype,hrcnt,RepSpec,4,EPContractr,BHr,EPBl,timeclass,true);
    
    GetTSRecs(daytype,hrcnt,size,EPContractr.ContractNr,RepSpec);
    GetOffWorkRecs(daytype,hrcnt,size,EPContractr.ContractNr,RepSpec);
    firstf = true;
    a = GetDateId(repSpec.sStartDate);
    hpos = a;
    size2 = 1;
    for (i = 0; i < size; i = i + 1) begin
      tstr = i+1  ;
      if (daytype[i]<>"") then begin
        AddToArray(tottrtypes,totcnt,tothrcnt,size2,daytype[i],0);
        OUTFORMFIELD(tstr,daytype[i]);
      end else begin
        if (hrcnt[i]>0) then begin
          PrintValue(tstr,hrcnt[i],M4UVal,LangNrr,SysFormatRec,false);
          if (hrcnt[i] <> 0) then begin
            AddToArray(tottrtypes,totcnt,tothrcnt,size2,"",hrcnt[i]);
          end;
        end;
      end;
    end;
    for (i = 0; i < size2; i = i +1) begin
      if (tottrtypes[i]<>"") then begin
        PrintValue(tottrtypes[i],totcnt[i],M4UVal,LangNrr,SysFormatRec,false);
      end else begin
        PrintValue("F_TOTANTAL",tothrcnt[i],M4UVal,LangNrr,SysFormatRec,false);
      end;
    end;
    size2 = 1;
    endformrow;
  end else begin
    //new output style - with all time classes
    OutputExpandedTimeStat(EPEmpr,RepSpec,EPContractr,EPBl,BHr);
  end;
  rownr = rownr +1;

LPrintOneEmp:;
  return;
end;

global
function val GetContractWorkedHours2(record EPContractVc EPContractr,date sd,date ed,Boolean timesheetf,var array val hrcnt)
begin
  //array val hrcnt;
  array string 20 daytype;
  integer size,i;
  record BHollVc BHr;
  record EPPayrollSetBlock EPBl;
  record TimeClassVc Timeclr,HolTimeclr;
  record CYBlock CYbl;
  string 20 timeclass;
  boolean TrHs,testf;
  val tres;
  record RCVc RepSpec;

  blockload(CYbl);
  blockload(EPBl);
  RepSpec.sStartDate = sd;
  RepSpec.sEndDate = ed;
  BHr.CountryCode = CYbl.CountryCode;
  testf = ReadFirstMain(BHr,1,true);
  TrHs = true;
  size = datediff(RepSpec.sEndDate,RepSpec.sStartDate)+1;
  BHr.CountryCode = CYbl.CountryCode;
  if ReadFirstMain(BHr,1,true)==false then begin
    RecordNew(BHr);
  end;

  tres = 0;
  GetDefaultHours(daytype,hrcnt,RepSpec,1,EPContractr,BHr,EPBl,timeclass,false);
  GetDefaultHours(daytype,hrcnt,RepSpec,2,EPContractr,BHr,EPBl,timeclass,true);
  GetDefaultHours(daytype,hrcnt,RepSpec,3,EPContractr,BHr,EPBl,timeclass,true);
  GetDefaultHours(daytype,hrcnt,RepSpec,4,EPContractr,BHr,EPBl,timeclass,true);
  
  if (timesheetf) then begin
    GetOffWorkRecs(daytype,hrcnt,size,EPContractr.ContractNr,RepSpec);
    GetTSRecs(daytype,hrcnt,size,EPContractr.ContractNr,RepSpec);
  end;
  for (i = 0; i < size; i = i + 1) begin
    if (daytype[i]=="") then begin
      tres = tres + hrcnt[i];
    end;
  end;
  
  GetContractWorkedHours2 = tres;
  return;
end;

global
function val GetContractWorkedHours(record EPContractVc EPContractr,date sd,date ed)
begin
  array val hrcnt;
  
  GetContractWorkedHours = GetContractWorkedHours2(EPContractr,sd,ed,true,hrcnt);

  return;
end;

global
function val GetTimeTableDays(date sd,date ed,string contractnr)
begin
  record EPContractVc EPContractr;
  array val hrcnt;
  Integer res,i;
  
  EPContractr.ContractNr = contractnr;
  if (ReadFirstMain(EPContractr,1,true)) then begin
    GetContractWorkedHours2(EPContractr,sd,ed,true,hrcnt);
    for (i=0;i<hrcnt.length;i=i+1) begin
      if (hrcnt[i]>0) then begin
        res = res + 1;
      end;
    end;
  end;
  
  GetTimeTableDays = res;
  return;
end;

procedure PrintHeader(record RcVc RepSpec,record BHollVc BHr)
begin
  record TimeClassVc TimeClr;
  Record EPPayrollSetBlock EPSetBl;
  string 255 tstr;
  integer i,l;
  
  BlockLoad(EPSetBl);
  
  l = daysinmonth(GetYear(RepSpec.sStartDate),GetMonth(RepSpec.sStartDate));
  TimeClr.Code = EPSetBl.DefTimeClass;
  if ReadFirstMain(TimeClr,1,true) then begin 
    for (i = 1; i <= l;i = i + 1) begin   
      tstr = i;
      if IsEPHolliday(AddDay(RepSpec.sStartDate,i-1),BHr,Timeclr,false,false) then begin
        if IsEPHolliday(AddDay(RepSpec.sStartDate,i-1),BHr,Timeclr,true,false) then begin
          OUTFORMFIELD(tstr,"Sv");
        end else begin
          OUTFORMFIELD(tstr,"Br");
        end;
      end;
    end;
    EndFormRow;
  end;
  for (i = 1; i <= l;i = i + 1) begin 
    tstr = i;
    OUTFORMFIELD(tstr,i);
  end;
  EndFormRow;
return;
end;


global 
procedure PrintEmpTime(record RcVc RepSpec)
begin
  array string 20 tottrtypes;
  array integer totcnt;
  array val tothrcnt;
  
  array integer hrcnt;
  array string 20 daytype;
  integer size,a,i,hpos,size2;
  
  record BHollVc BHr;
  record TimeClassVc Timeclr;
  record CYBlock CYbl;
  record EPEMpVc EPEmpr;
  record EPContractVc EPContractr;
  record EPTSVc EPTSr;
  string 255 tstr;
  date cd;
  string 30 depcode;
  
  integer prevm,curm,rownr;
  boolean TrHs,testf,hf,firstf;
  
  blockload(CYbl);
  BHr.CountryCode = CYbl.CountryCode;
  testf = ReadFirstMain(BHr,1,true);
  TrHs = true;
  PrintHeader(RepSpec,BHr);
  
  OUTFORMFIELD("F_DATEYEAR",GetYear(RepSpec.sStartDate));
  GetmonthText("LAT",repSpec.sStartDate,tstr);
  OUTFORMFIELD("F_DATEMONTH",tstr);
  OUTFORMFIELD("F_STARTDATE",RepSpec.sStartDate);
  OUTFORMFIELD("F_ENDDATE",RepSpec.sEndDate);
  
  rownr = 1;
  while (loopMain(EPContractr,1,TrHs)) begin
    testf = true;
    if (EPcontractr.Closed ==1) then begin  
      testf = false;
    end;
    if EPContractr.ContractEmpType <> 0 Then Begin
      testf = false;
    end;
    if (nonblank(RepSpec.f2) and SetInSet(EPContractr.EmpCode,RepSpec.f2)==false) then begin
      testf = false;
    end;
    if (RepSpec.sEndDate < EPContractr.StartDate) then begin
      testf = false;
    end;
    if (nonblank(EPContractr.EndDate) and (RepSpec.sStartDate > EPContractr.EndDate)) then begin
      testf = false;
    end;
    if (testf and nonblank(RepSpec.f3)) then begin
      depcode = EPContractFieldOnDate2(EPContractr,RepSpec.sEndDate,"DepCode");
      if (depcode != RepSpec.f3) then begin
        testf = false;
      end;
    end;
    if (testf and nonblank(RepSpec.f1)) then begin
      EPEmpr.EmpCode = EPContractr.EmpCode;
      if (ReadFirstMain(EPEmpr,1,true)) then begin
        if (RepSpec.f1 <> EPEmpr.Group) then begin
          testf = false;
        end;
      end;
    end;
    if (testf) then begin
      PrintOneEmp(RepSpec,EPContractr,rownr);  
    end;
  end;  
return;
end;


global
procedure DoEPEmpTimeStatForm(record RcVc RepSpec,record EPTS2Vc EPTS2r)
BEGIN
  record EPEmpVc EPEMPr;
  Integer i,rwcnt;
  record FormDefVc FDr;
  row FormDefVc FDrw;
  string 255 tstr;
  val t;
  string 30 formcode;
  Boolean printf;
  Integer intdocnr;
  string 10   dummy;
  
  
  if (EPTS2r.SerNr>-1) then begin
    RepSpec.long1 = EPTS2r.SerNr;
    RepSpec.sStartDate = EPTS2r.StartDate;
    RepSpec.sEndDate = EPTS2r.EndDate;
  end;
  
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoEPEmpTimeStatForm;
  end;
  rwcnt = MatRowCnt(FDr);
  intdocnr = 1;
  printf = true;
  while (printf) begin  
    formcode = "";
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowGet(FDr,i,FDrw);
      if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,-1,-1,FDrw.PrintGroupCode,
                      "",intdocnr,"EPTSVc",formcode)) then
      begin
        goto LBREAK;
      end;
    end;
LBREAK:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin 
          CommonDocumentFields(RepSpec);
          PrintEmpTime(repSpec);
          CloseForm;        
      end else begin
        printf = false;
      end;
    end else begin
      printf = false;
    end;
    intdocnr = intdocnr + 1;
    printf=false;
  end;
LDoEPEmpTimeStatForm:;
  RETURN;  
END;     

global
procedure EPEmpTimeStatForm(record RcVc RepSpec)
BEGIN
  boolean previewf,tmpf;
  
  previewf = false;
  tmpf = PrintDocument(RepSpec,"EPEmpTimeStatForm",previewf);    

  RETURN;
END;
